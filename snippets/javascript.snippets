snippet ?
	${1} ? ${2} : ${3}
snippet |
	${1} || ${2}
snippet &
	${1} && ${2} || ${3}
snippet .
	${1:this}.${2}
snippet /
	( ${1} )${2}
snippet def
	${1:name} = ${2}
snippet var
	var ${1:name} = ${2:value}${3:;}
	${4}
snippet fn
	function ${1}{
		${2}
	}
snippet ret
	return ${1};
snippet if
	if(${1}){
		${2}
	}
snippet for
	for(var ${2:i} = -1, ${3:len}=${1:Things}.length; ++$2 < $3; ){
		var ${4} = ${5:$1[$2]};
		${6}
	};
snippet wh
	while(${1}) {
		${2}
	}
snippet do
	do {
		${2}
	} while  (${1});
	${3}
snippet err
	throw new Error('${1}');
	${2}
snippet exp
	var ${1:name} = exports.$1 = function $1(${2}){
		${3}
	}
snippet extend
	extend(${1:Class}, ${2:Super});
	${3}
snippet super
	${1:Class}.prototype.${2:constructor}.${3:call}(this${4});
	${5}
snippet req
	require('${1:./}${2:module}')${3}${4:;}
	${5} 
snippet proto
	${1:Class}.prototype.${2:member} = ${3}
snippet method
	${1:Class}.prototype.${2:method} = function(${3:arguments}){
		${4}
	};
	${5}
snippet prop
	${1:Class}.prototype.get${2:Name} = function(){
		return this._${3:name}_ == null && this.set$2(${4:[]}) || this._$3_;
	}

	$1.prototype.set$2 = function(${5:value}){
		this._$3_ = $5;
		return $5;
	}
	${6}
snippet get
	${1:this}.get${2:Name}(${3});
snippet set
	${1:this}.set${2:Name}(${3:null});
	$4
snippet	$
	${1:document}.getElementById('${2:id}')${3}
